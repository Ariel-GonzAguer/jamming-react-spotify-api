el primer problema al realizar este proyecto fue el conectarme con la API de spotify. Aunque su documentación es bastante clara, utilizan una librería para llamadas API, llamada curl. Aunque quiero y me gusta aprender a usar nuevas librerías, para este proyecto quise enfocarme en poner en práctica lo que he aprendido en el Path, además quiero terminar rápido este proyecto para seguir con otros. Para convertir el código de los ejemplos de la documentación a formato fetch async/await usé https://www.scrapingbee.com/curl-converter/javascript-fetch/. Después de modificar el código un poco para obtener los parámetros que quería, pude realizar correctamente las llamadas a la API y ver los resultados tanto de la solicitud HTTP como de la respuesta en su formato array. Algo que aprendí con este problema, fue el usar esa herramienta que traduce el código.

el segundo problema a superar fue que le daba atributos a etiquetas HTML que no podían recibirlos tal cual, pues no son atributos nativos de esas etiquetas. A un <button /> le daba atributos artist, album, id, title. Los ultimos dos son nativos, los reconocía sin problema, pero los dos primeros siempre volvían undefined. Además de recibir el undefined en consola, estos atributos no se veían refejados en la UI como debía ser, dentro de un elemento li. Aunque en algún momento sospeché que por ahí iba el problema, nunca logré darle solucionarlo solo, e incluso intenté crear un botón "artificial" con un <span />, llegando siempre al problema del undefined. 
La solución a esto la logré gracias a un camarada que conocí en FB, Juan David Mateus, de Colombia. Este camarada me explicó el por qué del error y cómo solucionarlo. Realmente fue muy sencillo: hay atributos que no son nativos de ciertas etiquetas. Para agregar estos atributos se usa data-set (https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset). Se agrega un data- antes del nombre el atributo, ejemplo: <button id='btn1' data-bottle='bottle1' data-material='pinkGlass'>Pnk</button>. Al usar este atributo lo llamamos con: elemento.dataset.bottle. Lo que aprendí con este problema fue a usar data-set. Este problema no lo pude solucionar con Chat GPT, Cody IA ni Gemini.

Al tercer problema también le encontré solución con el mismo camarada Juan David. El problema esta vez fue que al intentar eliminar un elemento de la lista, no se eliminaba por un tema del key, que además React me daba la alerta de que mis elementos no tenían key, lo cuál me parecía extraño pues la propiedad si se mostraba. El origen del problema era que confundí las key con las id, y las mezclaba dentro de funciones. Después de resolver este problema aprendí que las key solo se usan, generalmente, cuando React las solicita y esto pasa cuando se crean elementos mediante el método map. Siempre que hayan etiquetas li, cada una debe tener una key. Siempre que se cree un elemento mediante un map, cada elemento debe tener una key. Este problema no lo pude solucionar con Chat GPT, Cody IA ni Gemini.

El cuarto problema se presentó después de lograr la llamada a la API de spotify. Al querer renderizar los elementos que regresaban del array de la llamada, obtenía este error:“Objects Are Not Valid as a React Child”. Apesar de que la respuesta volvía dentro de un array, recibía el error con la palabra Object. Al ejecutar el código, este se rompía. Decidí poner la respuesta de la llamada API dentro de un array vacío. AL hacer esto el programa ya no se rompía, pero no se renderizaba ningún elemento, solo podía ver el resultado en la consola usando console.log. Empecé a retroceder en la línea de componentes para ver dónde estaba el error.
En el componente contenedor/padre se podía trabajar sin problema con el array resultante de la llamada API (ya sin estar dentro de otro array), al menos usando los atributos que usé en el momento...
Seguí retrocediendo en los componentes. El siguiente a revisar, recibía correctamente el array, y de nuevo, con los atributos que usé, no tenía problema. En el penúltimo componente a revisar, noto que el código se vuelve a romper, y me doy cuenta que estoy usando atributos con más de una dimensión, es decir, que están dentro de un objeto. Este era el problema, efectivamente estaba usando objetos "sin abrir". Al acceder correctamente a las propiedades del objeto, el programa no se rompía y se renderizaba todo correctamente.
Aunque abrí algunas pestañas con artículos sobre este problema, no llegué a leerlos, pues aplicando ese retoceso en los componentes, llegué a la solución. Algo que aprendí con este problema, fue a revisar muy bien qué información retorna la llamada API, para determinar como trabajar con ella.

El quinto problema, y en realidad es más grande, fue lograr crear la nueva lista de reproducción y agregarle canciones.
Miré un tutorial de cómo conectarme a la API de spotify para obtener un token, el cuál es el primer elemento indispensable para usar la API de spotify ( https://www.youtube.com/watch?v=wBq3HCvYfUg&list=LL&index=4&ab_channel=Domthedev ). En el video la persona como conectarse de manera básica para poder obtener (GET) información de la API, pero no muestra cómo enviar (POST) información a la API.
Aunque usé la documentación de Spotify, algo en mi código faltaba, porque me indicaba que no tenía permiso para acceder a esas funcionalidades de la API. El fallo inicialmente estaba en el scope al que solicitaba acceso, no estaba solicitando suficiente permiso del usuario. Empecé a analizar el código en la documentación, a repasar el tutorial de internet y también a mirar el archivo con el código de ejemplo que tenía, el cuál evitaba mirar pues sentí podía hacerlo sin "hacer trampa". Revisando todo lo anterior, noté que mi código estaba casi listo, pero le faltaban pequeñas partes clave para que las solicitudes a la API se resolvieran positivamente.
Aumenté el scope en la solictud, bastaba agregar unas pocas palabras en la URL a la que sería redireccionado al hacer logIn. Después miré que mis solicitudes POST no estaban bien. Mucho del código de ejemplo, ya lo había logrado en mi proyecto, pero definitivamente me hace falta repasar el tema de solicitudes HTTP. Una vez corregido todo lo anterior, mi app ya funciona como se espera según las indicaciones del proyecto, solo queda limpiar el código y realizar pruebas unitaras.

El sexto es que parece ser que solo la persona que crea la app en el dashboard de Spotify tiene acceso a la app en desarrollo. Se supone que agregando usuarios a una lista dentro de la app, estos ya pueden acceder, un máximo de 25 personas, y si la uri a redireccionar es el localhost, solo pueden usar la app dentro de la misma red. Agregué a otra persona a la lista para realizar pruebas.
